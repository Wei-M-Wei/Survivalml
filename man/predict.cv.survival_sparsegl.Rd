% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/survival_estimate.R
\name{predict.cv.survival_sparsegl}
\alias{predict.cv.survival_sparsegl}
\title{Make predictions from a `cv.survival_sparsegl` object.}
\usage{
\method{predict}{cv.survival_sparsegl}(
  object,
  newx,
  s = c("lambda.1se", "lambda.min"),
  type = c("link", "response", "coefficients", "nonzero", "class"),
  ...
)
}
\arguments{
\item{object}{Fitted [cv.survival_sparsegl()] object.}

\item{newx}{Matrix of new values for `x` at which predictions are to be
made. Must be a matrix. This argument is mandatory.}

\item{s}{Value(s) of the penalty parameter `lambda` at which
coefficients are desired. Default is the single
value `s = "lambda.1se"` stored in the CV object (corresponding to
the largest value of `lambda` such that CV error estimate is within 1
standard error of the minimum). Alternatively `s = "lambda.min"` can be
used (corresponding to the minimum of cross validation error estimate).
If `s` is numeric, it is taken as the value(s) of `lambda` to be used.}

\item{type}{Type of prediction required. Type `"link"` gives the linear
predictors for `"binomial"`; for `"gaussian"` models it gives the fitted
values. Type `"response"` gives predictions on the scale of the response
(for example, fitted probabilities for `"binomial"`); for `"gaussian"` type
`"response"` is equivalent to type `"link"`. Type
`"coefficients"` computes the coefficients at the requested values for
`s`.
Type `"class"` applies only to `"binomial"` models, and produces the
class label corresponding to
the maximum probability. Type `"nonzero"` returns a list of the indices
of the nonzero coefficients for each value of \code{s}.}

\item{...}{Not used.}
}
\value{
A matrix or vector of predicted values.
}
\description{
This function makes predictions from a cross-validated [cv.survival_sparsegl()] object,
using the stored `survival_sparsegl.fit` object, and the value chosen for `lambda`.
}
\examples{
n <- 100
p <- 20
X <- matrix(rnorm(n * p), nrow = n)
eps <- rnorm(n)
beta_star <- c(rep(5, 5), c(5, -5, 2, 0, 0), rep(-5, 5), rep(0, (p - 15)))
y <- X \%*\% beta_star + eps
groups <- rep(1:(p / 5), each = 5)
fit1 <- survival_sparsegl(X, y, group = groups)
cv_fit <- cv.survival_sparsegl(X, y, groups)
predict(cv_fit, newx = X[50:60, ], s = "lambda.min")

}
\seealso{
[cv.survival_sparsegl()] and [coef.cv.survival_sparsegl()].
}
